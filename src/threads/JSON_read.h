
#ifndef   _THREAD_JSON_READ_H_
#define   _THREAD_JSON_READ_H_

#include <cmath>
#include <functional>
#include <eigen3/Eigen/Core>
#include <GeographicLib/GeoCoords.hpp>

#include "io_thread.h"
#include "localization.h"
#include "../utility.h"
#include "../datum.h"
#include "../localization_caller.h"
#include "../myahrs_plus.hpp"

enum class RMC_STRING
{
  SENTENCE_TYPE = 0,
  TIME = 1,
  STATUS = 2,
  LAT_RAW = 3,
  LAT_CARDINAL = 4,
  LON_RAW = 5,
  LON_CARDINAL = 6,
  SPEED = 7,
  TRACK_ANGLE = 8
};
static std::string NORTH = "N";
static std::string EAST = "E";

namespace threads
{
  /**
  * A custom thread generated by gams_sim_conf.pl
  **/
  class JSON_read : public io_thread, public LocalizationCaller
  {
  public:
    JSON_read (std::shared_ptr<asio::serial_port> port_, std::shared_ptr<WithRobot::MyAhrsPlus> ahrs, Containers & containers_, threads::localization * localization_reference);
    virtual ~JSON_read ();
    
    /**
      * Initializes thread with MADARA context
      * @param   context   context for querying current program state
      **/
    virtual void init (madara::knowledge::KnowledgeBase & knowledge);

    /**
      * Executes the main thread logic
      **/
    virtual void run (void);

    void callback_example (); // demonstrate c++11 callbacks

  private:
    double GPRMC_to_degrees(double value);
    char end_of_line_char;
    int rejected_line_count;
  };
} // end namespace threads

#endif // _THREAD_JSON_READ_H_
