
#ifndef   _RANDOM_MOTOR_SIGNALS_H_
#define   _RANDOM_MOTOR_SIGNALS_H_

#include <string>
#include <memory>
#include <random>
#include <vector>
#include <stdio.h>

#include "madara/threads/BaseThread.h"
#include "../boat_containers.h"
#include "../utility.h"

namespace threads
{
  /**
  * A custom thread generated by gams_sim_conf.pl
  **/
  class random_motor_signals : public madara::threads::BaseThread
  {
  public:
    /**
     * Default constructor
     **/
    random_motor_signals (Containers & containers_);
    
    /**
     * Destructor
     **/
    virtual ~random_motor_signals ();
    
    /**
      * Initializes thread with MADARA context
      * @param   context   context for querying current program state
      **/
    virtual void init (madara::knowledge::KnowledgeBase & knowledge);

    /**
      * Executes the main thread logic
      **/
    virtual void run (void);

  private:
    /// data plane if we want to access the knowledge base
    madara::knowledge::KnowledgeBase data_;
    Containers containers;
    std::random_device rd;
    std::shared_ptr<std::mt19937> generator;
    std::shared_ptr<std::uniform_real_distribution<>> distribution;
    std::vector<double> motor_signals;
  };
} // end namespace threads

#endif // _RANDOM_MOTOR_SIGNALS_H_
