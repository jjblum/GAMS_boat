
#ifndef   _THREAD_DYNAMITE_H_
#define   _THREAD_DYNAMITE_H_

#include <string>

#include "madara/threads/BaseThread.h"
#include "../boat_containers.h"
#include "/home/pi/Navio2/C++/Navio/PWM.h"
#include "/home/pi/Navio2/C++/Navio/Util.h"
#include "/home/pi/Navio2/C++/Navio/gpio.h"
#include <unistd.h>

#define VELOCITY_ALPHA 0.1
#define VELOCITY_THRESHOLD 0.001

#define MOTOR0_PWM_PIN 0
//#define MOTOR0_PWR_PIN 1
#define MOTOR1_PWM_PIN 1
//#define MOTOR1_PWR_PIN 3


namespace threads
{
  /**
  * A custom thread generated by gams_sim_conf.pl
  **/
  class dynamite : public madara::threads::BaseThread
  {
  public:
    /**
     * Default constructor
     **/
    dynamite (Containers &);
    
    /**
     * Destructor
     **/
    virtual ~dynamite ();
    
    /**
      * Initializes thread with MADARA context
      * @param   context   context for querying current program state
      **/
    virtual void init (madara::knowledge::KnowledgeBase & knowledge);

    /**
      * Executes the main thread logic
      **/
    virtual void run (void);

  private:
    /// data plane if we want to access the knowledge base
    madara::knowledge::KnowledgeBase data_;
    Containers containers;
    double velocities_[2];
    double pwm_pins_[2] = { MOTOR0_PWM_PIN, MOTOR1_PWM_PIN };
    //double pwr_pins_[2] = { MOTOR0_PWR_PIN, MOTOR1_PWR_PIN };
    Navio::Pin pwrPin0;
    Navio::Pin pwrPin1;
    PWM pwm; 
    bool motors_armed = false;

    void setMotor(int, double);
  };
} // end namespace threads
	
#endif // _THREAD_DYNAMITE_H_
