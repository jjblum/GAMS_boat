
#ifndef   _THREAD_AHRS_H_
#define   _THREAD_AHRS_H_

#include <string>

#include "madara/threads/BaseThread.h"
#include "../boat_containers.h"
#include <unistd.h>
#include "localization.h"
#include "../utility.h"
#include "../datum.h"
#include "../localization_caller.h"
#include "asio.hpp"
#include "asio/error_code.hpp"
#include "asio/serial_port.hpp"
#include "asio/buffer.hpp"
#include "asio/io_service.hpp"
#include <cmath>
#include <functional>
#include <eigen3/Eigen/Core>




#define G_SI 9.80665
#define PI   3.14159

namespace threads
{
  /**
  * A custom thread generated by gams_sim_conf.pl
  **/
  class myahrs : public madara::threads::BaseThread, public LocalizationCaller
  {
  public:
    /**
     * Default constructor
     **/
    myahrs (Containers &, threads::localization * localization_reference);
    
    /**
     * Destructor
     **/
    virtual ~myahrs ();
    
    /**
      * Initializes thread with MADARA context
      * @param   context   context for querying current program state
      **/
    virtual void init (madara::knowledge::KnowledgeBase & knowledge);

    /**
      * Executes the main thread logic
      **/
    virtual void run (void);

  private:
    /// data plane if we want to access the knowledge base
    madara::knowledge::KnowledgeBase data_;
    Containers containers;

    char end_of_line_char;
    std::shared_ptr<asio::serial_port> port;
    char raw_buffer[256];
  };
} // end namespace threads
	
#endif // _THREAD_AHRS_H_
