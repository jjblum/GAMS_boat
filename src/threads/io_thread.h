
#ifndef   _THREAD_IO_H_
#define   _THREAD_IO_H_

#include "madara/threads/BaseThread.h"
#include "asio.hpp"
#include "asio/error_code.hpp"
#include "asio/serial_port.hpp"
#include "asio/buffer.hpp"
#include "asio/io_service.hpp"
#include <stdio.h>
#include <iostream>
#include <string>
#include <sstream>
#include <thread>
#include <memory>
#include <vector>
#include <chrono>
#include "nlohmann/json.hpp"
#include "../boat_containers.h"

#define BUFFER_SIZE 256
#define PORT_NAME "/dev/ttyACM0" // the bottom usb slot on the odroid?
#define BAUD_RATE 115200
#define END_OF_LINE_CHAR '\n'
#define INITIAL_REJECT_COUNT 10 // number of lines to reject initially to avoid junk

using json = nlohmann::json;

namespace threads
{
  /**
  * A custom thread generated by gams_sim_conf.pl
  **/
  class io_thread : public madara::threads::BaseThread
  {
  public:
    io_thread (std::shared_ptr<asio::serial_port> port_, Containers & containers_);
    ~io_thread ();
    
    /**
      * Initializes thread with MADARA context
      * @param   context   context for querying current program state
      **/
    virtual void init (madara::knowledge::KnowledgeBase & knowledge);

    /**
      * Executes the main thread logic
      **/
    virtual void run (void);

  protected:
    /// data plane if we want to access the knowledge base
    madara::knowledge::KnowledgeBase kb;
    std::shared_ptr<asio::serial_port> port;
    Containers containers;
    char raw_buffer[BUFFER_SIZE];
    std::string raw_data;

  };
} // end namespace threads

#endif // _THREAD_IO_H_
